<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[朱邏輯公園]]></title>
  <subtitle><![CDATA[Belive yourself,belive Cherry.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.prokitty.com/"/>
  <updated>2015-02-16T15:13:36.226Z</updated>
  <id>http://www.prokitty.com/</id>
  
  <author>
    <name><![CDATA[cherry]]></name>
    <email><![CDATA[prossh@foxmai.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[网址导航]]></title>
    <link href="http://www.prokitty.com/2915/02/12/%E6%88%91%E7%9A%84%E7%BD%91%E5%9D%80%E5%AF%BC%E8%88%AA/"/>
    <id>http://www.prokitty.com/2915/02/12/我的网址导航/</id>
    <published>2915-02-11T16:00:00.000Z</published>
    <updated>2015-02-11T15:12:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Centos镜像">Centos镜像</h1>
<ul>
<li><p><a href="http://mirrors.163.com/centos/" target="_blank" rel="external">163 Centos镜像</a>  </p>
</li>
<li><p><a href="http://mirror.neu.edu.cn/centos/" target="_blank" rel="external">东北大学Centos镜像</a></p>
</li>
</ul>
<h1 id="博客友联">博客友联</h1>
<ul>
<li><p><a href="http://blog.51yip.com/" target="_blank" rel="external">海底苍鹰博客</a></p>
</li>
<li><p><a href="http://itlab.idcquan.com/linux/special/linuxcom/Index.html" target="_blank" rel="external">Linux常用命令全集</a></p>
</li>
<li><p><a href="http://blog.liuts.com/" target="_blank" rel="external">运维进行时博客</a></p>
</li>
<li><p><a href="http://bbs.linuxtone.org/forum.php" target="_blank" rel="external">运维专家网论坛</a></p>
</li>
<li><p><a href="http://codingstandards.iteye.com/" target="_blank" rel="external">Bash@Linux博客</a></p>
</li>
<li><p><a href="https://blog.linuxeye.com/" target="_blank" rel="external">Linux运维笔记</a></p>
</li>
<li><p><a href="http://www.ha97.com/" target="_blank" rel="external">服务器运维与网站架构|Linux运维|X研究</a></p>
</li>
<li><p><a href="http://www.ttlsa.com/" target="_blank" rel="external">运维生存空间</a></p>
</li>
<li><p><a href="http://www.jingwang.tk/" target="_blank" rel="external">王靖博客</a></p>
</li>
<li><p><a href="http://blog.aoath.com/" target="_blank" rel="external">小怪兽博客</a></p>
</li>
<li><p><a href="http://laowang.me/" target="_blank" rel="external">隔壁老王博客</a></p>
</li>
<li><p><a href="http://bbs.xiamujun.cn/forum.php" target="_blank" rel="external">夏睦军论坛</a></p>
</li>
<li><p><a href="http://www.arthurding.com/" target="_blank" rel="external">亚瑟丁博客</a></p>
</li>
</ul>
<h1 id="IT名站">IT名站</h1>
<ul>
<li><p><a href="http://linux.vbird.org/" target="_blank" rel="external">鸟哥的Linux私房菜</a></p>
</li>
<li><p><a href="http://os.51cto.com/" target="_blank" rel="external">Linux系统管理与运维</a></p>
</li>
<li><p><a href="http://www.chinaunix.net/" target="_blank" rel="external">ChinaUnix</a></p>
</li>
<li><p><a href="http://www.cnyunwei.com/portal.php" target="_blank" rel="external">运维网</a></p>
</li>
<li><p><a href="http://www.oschina.net/" target="_blank" rel="external">开源中国</a></p>
</li>
<li><p><a href="http://www.linuxidc.com/" target="_blank" rel="external">Linux公社</a></p>
</li>
<li><p><a href="http://linux.chinaunix.net/" target="_blank" rel="external">Linux时代</a></p>
</li>
<li><p><a href="http://linux.ubuntu.org.cn/" target="_blank" rel="external">Ubuntu导航</a></p>
</li>
<li><p><a href="http://www.linux.com/" target="_blank" rel="external">Linux主站</a></p>
</li>
<li><p><a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux之父的github</a></p>
</li>
<li><p><a href="http://itlab.idcquan.com/linux/" target="_blank" rel="external">Linux中国IT实验室</a></p>
</li>
<li><p><a href="http://linux.cn/" target="_blank" rel="external">Linux中国，我们的中文社区</a></p>
</li>
<li><p><a href="http://www.linuxdiyf.com/" target="_blank" rel="external">红联</a></p>
</li>
<li><p><a href="http://www.centos.org/" target="_blank" rel="external">Centos</a></p>
</li>
<li><p><a href="https://www.centos.bz/" target="_blank" rel="external">Linux运维日志</a></p>
</li>
<li><p><a href="http://roclinux.cn/" target="_blank" rel="external">Linux大棚</a></p>
</li>
<li><p><a href="http://oss.org.cn/kernel-book/ldd3/" target="_blank" rel="external">Linux设备驱动</a></p>
</li>
<li><p><a href="http://blog.jobbole.com/60549/" target="_blank" rel="external">伯乐在线</a></p>
</li>
<li><p><a href="http://www.2cto.com/os/linux/" target="_blank" rel="external">红黑联盟</a></p>
</li>
<li><p><a href="http://www.linuxtoday.com/" target="_blank" rel="external">Linux Today</a></p>
</li>
<li><p><a href="https://www.kernel.org/" target="_blank" rel="external">The Linux Kernel Archives</a></p>
</li>
<li><p><a href="http://www.iyunv.com/forum.php" target="_blank" rel="external">爱运维网</a></p>
</li>
</ul>
<h1 id="软件、源">软件、源</h1>
<ul>
<li><p><a href="http://www.iplaysoft.com/tag/linux" target="_blank" rel="external">异次元软件</a></p>
</li>
<li><p><a href="http://os.51cto.com/" target="_blank" rel="external">51cto</a></p>
</li>
<li><p><a href="http://os.51cto.com/" target="_blank" rel="external">51cto</a></p>
</li>
<li><p><a href="http://os.51cto.com/" target="_blank" rel="external">51cto</a></p>
</li>
<li><p><a href="http://os.51cto.com/" target="_blank" rel="external">51cto</a></p>
</li>
</ul>
<h1 id="招聘">招聘</h1>
<ul>
<li><p><a href="http://www.lagou.com/" target="_blank" rel="external">拉钩网</a></p>
</li>
<li><p><a href="http://www.zhaopin.com/" target="_blank" rel="external">智联招聘</a></p>
</li>
<li><p><a href="http://www.51job.com/beijing" target="_blank" rel="external">前程无忧</a></p>
</li>
<li><p><a href="http://www.liepin.com/" target="_blank" rel="external">猎聘网</a></p>
</li>
</ul>
<h1 id="Windows">Windows</h1>
<ul>
<li><a href="http://www.ttrar.com/" target="_blank" rel="external">天天软件</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[All Linux you searching for is here.]]>
    
    </summary>
    
      <category term="网址导航" scheme="http://www.prokitty.com/tags/%E7%BD%91%E5%9D%80%E5%AF%BC%E8%88%AA/"/>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[可以访问Google的Ip]]></title>
    <link href="http://www.prokitty.com/2915/02/11/%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AEGoogle%E7%9A%84IP/"/>
    <id>http://www.prokitty.com/2915/02/11/可以访问Google的IP/</id>
    <published>2915-02-11T14:00:00.000Z</published>
    <updated>2015-02-11T15:18:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="谷歌IP无穷多，搜集如下：">谷歌IP无穷多，搜集如下：</h2>
<p>1.<a href="http://173.194.193.18/" target="_blank" rel="external">173.194.193.18</a></p>
<p>2.<a href="http://173.194.64.105" target="_blank" rel="external">173.194.64.105</a></p>
<p>3.<a href="http://173.194.65.123" target="_blank" rel="external">173.194.65.123</a></p>
<p>4.<a href="http://208.117.224.208" target="_blank" rel="external">208.117.224.208</a></p>
<p>5.<a href="http://208.117.229.2" target="_blank" rel="external">208.117.229.2</a></p>
<p>6.<a href="http://216.58.209.109" target="_blank" rel="external">216.58.209.109</a></p>
<p>7.<a href="http://216.58.219.15" target="_blank" rel="external">216.58.219.15</a></p>
<p>8.<a href="http://216.58.220.247" target="_blank" rel="external">216.58.220.247</a></p>
<p>9.<a href="http://64.233.167.144" target="_blank" rel="external">64.233.167.144</a></p>
<p>10.<a href="http://64.233.167.196" target="_blank" rel="external">64.233.167.196</a></p>
<p>11.<a href="http://74.125.22.191" target="_blank" rel="external">74.125.22.191</a></p>
<p>……</p>
]]></content>
    <summary type="html">
    <![CDATA[由于google被墙了，好多方式都访问不了，不过有人推荐了如下IP，却可以访问，留着备份，可以随时访问方便。]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="搜索" scheme="http://www.prokitty.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="网址导航" scheme="http://www.prokitty.com/tags/%E7%BD%91%E5%9D%80%E5%AF%BC%E8%88%AA/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Google" scheme="http://www.prokitty.com/categories/Google/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Squid配置]]></title>
    <link href="http://www.prokitty.com/2015/02/14/squid%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.prokitty.com/2015/02/14/squid配置/</id>
    <published>2015-02-14T12:50:00.000Z</published>
    <updated>2015-02-15T04:30:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_什么是squid">1. 什么是squid</h1>
<p>squid可以做代理也可以做缓存<br>squid缓存不仅可以节省宝贵的带宽资源，也可以大大降低服务器的I/O.<br>squid不仅可以做正向代理，又可以做反向代理。<br>正向代理，squid后面是客户端，客户端上网要通过Squid去上；反向代理，squid后面是服务器，服务器返回给用户数据需要走squid.<br>正向代理用在企业的办公环境中，员工上网需要通过squid代理来上网，这样可以节省网络带宽资源。而反向代理用来搭建网站静态项(图片、html、流媒体、js、css等)的缓存服务器，它用于网站架构中。 </p>
<h1 id="2-_搭建squid正向代理">2. 搭建squid正向代理</h1>
<p>官方网站为 <a href="http://www.squid-cache.org/" target="_blank" rel="external">http://www.squid-cache.org/</a><br><code>yum install -y squid</code><br><code>squid -v</code> 查看版本以及编译参数<br><code>&gt; /etc/squid/squid.conf</code><br><code>vim /etc/squid/squid.conf</code><br>加入如下配置:</p>
<pre><code>
http_port 3128
acl manager proto cache_object
acl localhost src 127.0.0.1/32 ::1
acl to_localhost dst 127.0.0.0/8 0.0.0.0/32 ::1
acl localnet src 10.0.0.0/8     # RFC1918 possible internal network
acl localnet src 172.16.0.0/12  # RFC1918 possible internal network
acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
acl SSL_ports port 443
acl Safe_ports port 80 8080         # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443         # https
acl CONNECT method CONNECT
http_access allow manager localhost
http_access deny manager
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localnet
http_access allow localhost
http_access allow all
cache_dir aufs /data/cache 1024 16 256
cache_mem 128 MB
hierarchy_stoplist cgi-bin ?
coredump_dir /var/spool/squid
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern \.(jpg|png|gif|mp3|xml) 1440    50%     2880    ignore-reload
refresh_pattern .               0       20%     4320
### 到此结束</code></pre>

<p><code>mkdir  /data/cache</code> #创建缓存目录<br><code>chown -R squid:squid /data/cache</code>  #更改权限<br><code>squid -z</code>  #初始化缓存目录，该步骤可以省略<br><code>/etc/init.d/squid start</code><br><code>squid  -kcheck</code>#可以检测配置文件是否有错<br><code>squid -k rec</code>#可以重新加载配置<br><code>service squid restart</code> #重启squid服务</p>
<p>测试：<code>curl -xlocalhost:3128 www.qq.com</code><br>访问图片，测试缓存： <code>curl -xlocalhost:3128   -I &#39;http://www.aminglinux.com/bbs/static/image/common/logo.png&#39;</code><br>限制某些域名不能通过代理访问，或者说只想代理某几个域名  <code>vim /etc/squid/squid.conf</code></p>
<pre><code>acl http proto HTTP 
acl good_domain dstdomain .lishiming.net .aminglinux.com 
http_access allow http good_domain 
http_access deny http !good_domain 
测 curl -xlocalhost:3128 www.google.com.hk -I  #403
测 curl -xlocalhost:3128 www.aminglinux.com/bbs/forum.php  -I #200
vim /etc/squid/squid.conf  #设置域名黑名单</code></pre>

<h1 id="3-_搭建squid反向代理">3. 搭建squid反向代理</h1>
<p><code>vim /etc/squid/squid.conf</code>#如下变更<br><code>http_port 3128 改为 http_port 80 accel vhost vport</code><br>增加如下内容：</p>
<p><pre><code><br>cache_peer 123.125.119.147 parent 80 0 originserver name=a<br>cache_peer 61.135.169.125 parent 80 0 originserver name=b<br>cache_peer_domain a www.qq.com<br>cache_peer_domain b www.baidu.com </code></pre></p>
<p><br>之前增加的域名白/黑名单相关配置去掉<br>如果是squid要代理一台web上的所有域名，那么就写成这样: <pre><code>cache_peer 192.168.10.111 80 0 originserver  #只需要这一行</code></pre>，cache_peer_domain  都可以省掉<br><code>/etc/init.d/squid restart</code><br>测试<code>www.baidu.com www.qq.com  www.lishiming.net</code></p>
<h1 id="4-_需要你练习的知识点">4. 需要你练习的知识点</h1>
<p>配置一下squid的防盗链<br>如何查看squid的缓存命中率<br>如何删除指定的squid缓存文件<br>squid日志不记录指定文件的访问<br>尝试配置一下squid透明代理（有用到防火墙知识）</p>
]]></content>
    <summary type="html">
    <![CDATA[squid可以做代理也可以做缓存squid缓存不仅可以节省宝贵的带宽资源，也可以大大降低服务器的I/O.squid不仅可以做正向代理，又可以做反向代理。]]>
    
    </summary>
    
      <category term="squid" scheme="http://www.prokitty.com/tags/squid/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[负载均衡集群（Lv Skeepalived)]]></title>
    <link href="http://www.prokitty.com/2015/02/14/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4LVSkeepalived/"/>
    <id>http://www.prokitty.com/2015/02/14/负载均衡集群LVSkeepalived/</id>
    <published>2015-02-14T11:51:00.000Z</published>
    <updated>2015-02-15T04:30:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="LVS/NAT_配置">LVS/NAT 配置</h1>
<p>三台服务器一台作为director, 两台作为real server Director 有一个外网ip (192.168.0.132)和一个内网ip(192.168.36.132), 两个real server上只有内网ip(192.168.36.137)和(192.168.36.138) 并且需要把两个real server的内网网关设置为director的内网ip(192.168.36.132)<br>两个real server 上都安装httpd:<br><code>yum install -y httpd</code><br>Director上安装ipvsadm:<br><code>yum install -y  ipvsadm</code><br>Direcotr 上 <code>vim /usr/local/sbin/lvs_nat.sh</code> //增加:</p>
<pre><code>#! /bin/bash
# director 服务器上开启路由转发功能: 
echo 1 > /proc/sys/net/ipv4/ip_forward 
# 关闭icmp的重定向
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
echo 0 > /proc/sys/net/ipv4/conf/eth1/send_redirects

# director 设置nat防火墙
iptables -t nat -F
iptables -t nat -X
iptables -t nat -A POSTROUTING -s 192.168.200.0/24  -j MASQUERADE
# director设置ipvsadm
IPVSADM=`/sbin/ipvsadm`
$IPVSADM -C
$IPVSADM -A -t 192.168.0.11:80 -s lc -p 300
$IPVSADM -a -t 192.168.0.11:80 -r 192.168.200.128:80 -m -w 1
$IPVSADM -a -t 192.168.0.11:80 -r 192.168.200.129:80 -m -w 1</code></pre>


<p>直接运行这个脚本就可以完成lvs/nat的配置了:<br><code>/bin/bash /usr/local/sbin/lvs_nat.sh</code><br>通过浏览器测试两台机器上的httpd内容。</p>
<h1 id="LVS/DR_配置">LVS/DR 配置</h1>
<p>三台机器:<br>director(eth0192.168.0.11, vip eth0:0: 192.168.0.100)<br>real server1(eth0 rip: 192.168. 0.21, vip lo:0: 192.168.0.100)<br>real server2(eth0 rip: 192.168.0.22, vip lo:0: 192.168.0.100)<br>Director 上 <code>vim /usr/local/sbin/lvs_dr.sh</code> //增加</p>
<pre><code>#! /bin/bash
echo 1 > /proc/sys/net/ipv4/ip_forward
ipv=/sbin/ipvsadm
vip=192.168.0.100
rs1=192.168.0.21
rs2=192.168.0.22
ifconfig eth0:0 $vip broadcast $vip netmask 255.255.255.255 up
route add -host $vip dev eth0:0
$ipv -C
$ipv -A -t $vip:80 -s rr 
$ipv -a -t $vip:80 -r $rs1:80 -g -w 1
$ipv -a -t $vip:80 -r $rs2:80 -g -w 1</code></pre>


<p>两台rs上：<code>vim /usr/local/sbin/lvs_dr_rs.sh</code></p>
<pre><code>#! /bin/bash
vip=192.168.0.100
ifconfig lo:0 $vip broadcast $vip netmask 255.255.255.255 up 
route add -host $vip lo:0
echo "1" >/proc/sys/net/ipv4/conf/lo/arp_ignore
echo "2" >/proc/sys/net/ipv4/conf/lo/arp_announce
echo "1" >/proc/sys/net/ipv4/conf/all/arp_ignore
echo "2" >/proc/sys/net/ipv4/conf/all/arp_announce</code></pre>


<p>关于<code>arp_ignore</code>和 <code>arp_announce</code>参考：<a href="http://www.cnblogs.com/lgfeng/archive/2012/10/16/2726308.html" target="_blank" rel="external">http://www.cnblogs.com/lgfeng/archive/2012/10/16/2726308.html</a></p>
<p>然后director上执行:<code>bash /usr/local/sbin/lvs_dr.sh</code><br>两台rs上执行: <code>bash /usr/local/sbin/lvs_dr_rs.sh</code><br>Windows下浏览器测试访问</p>
<h1 id="LVS/DR_+_keepalived配置">LVS/DR + keepalived配置</h1>
<p>注意：前面虽然我们已经配置过一些操作，但是下面我们使用keepaliave操作和之前的操作是有些冲突的，所以若是之前配置过DR，请首先做如下操作：dr上执行：</p>
<p><code>$ipv -C
ifconfig eth0:0  down</code></p>
<p>前面的lvs虽然已经配置成功也实现了负载均衡，但是我们测试的时候发现，当某台real server把httpd进程停掉，那么director照样会把请求转发过去，这样就造成了某些请求不正常。所以需要有一种机制用来检测real server的状态，这就是keepalived。它的作用除了可以检测rs状态外，还可以检测备用director的状态，也就是说keepalived可以实现ha集群的功能，当然了也需要一台备用director.<br>备用director也需要安装一下keepalived软件<br><code>yum install -y keepalived</code><br>安装好后，编辑配置文件<br><code>vim /etc/keepalived/keepalived.conf</code>  //加入如下：</p>
<p><pre><code>vrrp_instance VI_1 {<br>    state MASTER   #备用服务器上为 BACKUP<br>    interface eth0<br>    virtual_router_id 51<br>    priority 100  #备用服务器上为90<br>    advert_int 1<br>    authentication {<br>        auth_type PASS<br>        auth_pass 1111<br>    }<br>    virtual_ipaddress {<br>        192.168.0.100<br>    }<br>}<br>virtual_server 192.168.0.100 80 {<br>    delay_loop 6                  #(每隔10秒查询realserver状态)<br>    lb_algo wlc                  #(lvs 算法)<br>    lb_kind DR                  #(Direct Route)<br>    persistence_timeout 60        #(同一IP的连接60秒内被分配到同一台realserver)<br>    protocol TCP                #(用TCP协议检查realserver状态)</code></pre></p>
<pre><code><span class="title">real_server</span> <span class="number">192.168.0.21</span> <span class="number">80</span> {
    <span class="title">weight</span> <span class="number">100</span>               <span class="comment">#(权重)</span>
    TCP_CHECK {
    <span class="title">connect_timeout</span> <span class="number">10</span>       <span class="comment">#(10秒无响应超时)</span>
    nb_get_retry <span class="number">3</span>
    delay_before_retry <span class="number">3</span>
    connect_port <span class="number">80</span>
    }
}
</code></pre><p>real_server 192.168.0.22 80 {<br>        weight 100<br>        TCP_CHECK {<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        }<br>     }<br>}<br><br>以上为主director的配置文件，从director的配置文件只需要修改<br><code>state MASTER  -&gt; state BACKUP</code><br><code>priority 100 -&gt; priority 90</code><br>配置完keepalived后，需要开启端口转发（主从都要做）：<br><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code><br>然后，两个rs上执行 <code>/usr/local/sbin/lvs_dr_rs.sh</code> 脚本<br>最后，两个director上启动keepalived服务（先主后从）：<br><code>/etc/init.d/keepalived start</code><br>另外，需要注意的是，启动keepalived服务会自动生成vip和ipvsadm规则，不需要再去执行上面提到的<code>/usr/local/sbin/lvs_dr.sh</code>脚本。</p>
]]></content>
    <summary type="html">
    <![CDATA[常用的负载均衡开源软件有： nginx、lvs、keepalived商业的硬件负载设备： F5、Netscale。]]>
    
    </summary>
    
      <category term="负载均衡" scheme="http://www.prokitty.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="LVS" scheme="http://www.prokitty.com/tags/LVS/"/>
    
      <category term="Keepalived" scheme="http://www.prokitty.com/tags/Keepalived/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lvs调度算法]]></title>
    <link href="http://www.prokitty.com/2015/02/14/lvs%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://www.prokitty.com/2015/02/14/lvs调度算法/</id>
    <published>2015-02-14T07:57:00.000Z</published>
    <updated>2015-02-15T04:32:01.000Z</updated>
    <content type="html"><![CDATA[<p>轮询调度（Round Robin）简称： RR；目标地址散列（Destination Hashinf ）简称： DH；最少链接（Least Connections） 简称: LC；加权最少连接(默认采用的就是这种)（Weighted Least Connections） 简称：WLC；最短的期望的延迟（Shortest Expected Delay Scheduling ） 简称：SED；最少队列调度（Never Queue Seheduling ） 简称：NQ；基于局部性的最少链接（Locality-Based Least Connections） (LBLC)；带复制的基于局部性最少连接（Locality-Based Least Connections with Replication）简称：LBLCR。<br><a href="http://yangdonglin.blog.51cto.com/5404572/1305111" target="_blank" rel="external">http://yangdonglin.blog.51cto.com/5404572/1305111</a></p>
]]></content>
    <summary type="html">
    <![CDATA[轮询调度、目标地址散列、最少链接、加权最少连接、最短的期望的延迟、最少队列调度、基于局部性的最少链接、带复制的基于局部性最少连接。]]>
    
    </summary>
    
      <category term="LVS" scheme="http://www.prokitty.com/tags/LVS/"/>
    
      <category term="算法" scheme="http://www.prokitty.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dns Tunnel的原理及实战]]></title>
    <link href="http://www.prokitty.com/2015/02/14/DNS%20tunnel%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
    <id>http://www.prokitty.com/2015/02/14/DNS tunnel的原理及实战/</id>
    <published>2015-02-14T07:49:00.000Z</published>
    <updated>2015-02-14T07:50:34.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://netsec.ccert.edu.cn/zhengming/2011/11/01/%E8%BD%AC%E8%BD%BD%EF%BC%9Adns-tunnel%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/" target="_blank" rel="external">http://netsec.ccert.edu.cn/zhengming/2011/11/01/%E8%BD%AC%E8%BD%BD%EF%BC%9Adns-tunnel%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[DNS tunnel 即 DNS隧道。从名字上来看就是利用DNS查询过程建立起隧道，传输数据！]]>
    
    </summary>
    
      <category term="tunnel" scheme="http://www.prokitty.com/tags/tunnel/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[四层和七层负载均衡的区别]]></title>
    <link href="http://www.prokitty.com/2015/02/14/%E5%9B%9B%E5%B1%82%E5%92%8C%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.prokitty.com/2015/02/14/四层和七层负载均衡的区别/</id>
    <published>2015-02-14T07:34:00.000Z</published>
    <updated>2015-02-14T07:36:18.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://kb.cnblogs.com/page/188170/" target="_blank" rel="external">四层和七层负载均衡的区别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[所谓四层就是基于IP+端口的负载均衡；七层就是基于URL等应用层信息的负载均衡。]]>
    
    </summary>
    
      <category term="负载均衡" scheme="http://www.prokitty.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="LVS" scheme="http://www.prokitty.com/tags/LVS/"/>
    
      <category term="四层" scheme="http://www.prokitty.com/tags/%E5%9B%9B%E5%B1%82/"/>
    
      <category term="七层" scheme="http://www.prokitty.com/tags/%E4%B8%83%E5%B1%82/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lvs Dr工作原理图文详解]]></title>
    <link href="http://www.prokitty.com/2015/02/14/LVS-DR%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.prokitty.com/2015/02/14/LVS-DR工作原理图文详解/</id>
    <published>2015-02-14T05:42:00.000Z</published>
    <updated>2015-02-14T05:43:01.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://os.51cto.com/art/201105/264303.htm" target="_blank" rel="external">LVS-DR工作原理图文详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[我们都知道LVS有LVS-DR，LVS-NAT，LVS-TUN三种模式，其中DR模式意为Direct Routing（直接路由）。对于LVS-DR，你到底了解到什么程度？本文通过一个实例场景，详细介绍了其每个执行步骤的工作原理，希望对大家有所帮助。]]>
    
    </summary>
    
      <category term="LVS" scheme="http://www.prokitty.com/tags/LVS/"/>
    
      <category term="DR" scheme="http://www.prokitty.com/tags/DR/"/>
    
      <category term="RS" scheme="http://www.prokitty.com/tags/RS/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lvs原理详解及部署之二：Lvs原理详解]]></title>
    <link href="http://www.prokitty.com/2015/02/14/LVS%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E9%83%A8%E7%BD%B2%E4%B9%8B%E4%BA%8C%EF%BC%9ALVS%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.prokitty.com/2015/02/14/LVS原理详解及部署之二：LVS原理详解/</id>
    <published>2015-02-14T05:38:00.000Z</published>
    <updated>2015-02-14T05:40:32.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.it165.net/admin/html/201401/2248.html" target="_blank" rel="external">LVS原理详解及部署之二：LVS原理详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[计算机集群架构按照功能和结构一般分成以下几类：负载均衡集群（Loadbalancingclusters）简称LBC、高可用性集群（High-availabilityclusters）简称HAC、高性能计算集群（High-perfomanceclusters）简称HPC、网格计算（Gridcomputing。网络上面一般认为是有三个，负载均衡和高可用集群式我们互联网行业常用的集群架构。]]>
    
    </summary>
    
      <category term="LVS" scheme="http://www.prokitty.com/tags/LVS/"/>
    
      <category term="负载均衡" scheme="http://www.prokitty.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="集群" scheme="http://www.prokitty.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再论双机热备]]></title>
    <link href="http://www.prokitty.com/2015/02/11/%E5%86%8D%E8%AE%BA%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/"/>
    <id>http://www.prokitty.com/2015/02/11/再论双机热备/</id>
    <published>2015-02-11T13:17:14.000Z</published>
    <updated>2015-02-11T13:59:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="双机热备的概念">双机热备的概念</h1>
<ul>
<li>从广义上讲，就是对于重要的服务，使用两台服务器，互相备份，共同执行同一服务。当一台服务器出现故障时，可以由另一台服务器承担服务任务，从而在不需要人工干预的情况下，自动保证系统能持续提供服务。　双机热备由备用的服务器解决了在主服务器故障时服务不中断的问题。但在实际应用中，可能会出现多台服务器的情况，即服务器集群。　双机热备一般情况下需要有共享的存储设备。但某些情况下也可以使用两台独立的服务器。实现双机热备，需要通过专业的集群软件或双机软件。</li>
<li>从狭义上讲，双机热备特指基于active/standby方式的服务器热备。服务器数据包括数据库数据同时往两台或多台服务器写，或者使用一个共享的存储设备。在同一时间内只有一台服务器运行。当其中运行着的一台服务器出现故障无法启动时，另一台备份服务器会通过软件诊测（一般是通过心跳诊断）将standby机器激活，保证应用在短时间内完全恢复正常使用。 </li>
</ul>
<h1 id="双机的三种模式">双机的三种模式</h1>
<ul>
<li>双机热备即是目前通常所说的主备方式，服务器数据包括数据库数据同时往两台或多台服务器写，或者使用一个共享的存储设备（如磁盘阵列柜）。当主服务器出现故障的时候，通过诊测（一般是通过心跳或串口线诊断）将备机器激活，保证应用在短时间内完全恢复正常使用。 </li>
<li>双机互备，在双机热备的基础上，两个相对独立的应用在两台机器同时运行，但彼此均设为备机，当某一台服务器出现故障时，另一台服务器可以在短时间内将故障服务器的应用接管过来，从而保证了应用的持续性。这种方式实际上是双机热备的一种应用。它避免了两个应用使用四台服务器分别实现双机热备。 </li>
<li>双机双工，两台或多台服务器均为活动，同时运行相同的应用，保证整体的性能，也实现了负载均衡和互为备份。需要利用磁盘柜存储技术。对于数据库服务而言，它同时需要数据库软件的支持，是比较复杂的。 </li>
</ul>
<h1 id="双机热备基本原理：">双机热备基本原理：</h1>
<h2 id="一-双机工作原理">一.双机工作原理</h2>
<ul>
<li>(1)心跳工作过程<br>通过IP做心跳检测时，主备机会通过此心跳路径，周期性的发出相互检测的测试包，如果此时主机出现故障，备机在连续丢失设定数目的检测包后，会认为主机出现故障，这时备机会自动检测设置中是否有第二种心跳，如果没有第二种心跳的话，备机则根据已设定的规则，启动备机的相关服务，完成双机热备的切换。</li>
<li>(2)IP工作过程<br>IP地址用虚拟IP地址的方法来实现，主要原理<br>主机正常的情况下虚拟IP地址指向主机的实IP地址，用户通过虚拟IP地址访问主机，这时，双机热备软件将虚拟IP地址解析到主机实IP地址。当主机做相关的切换时，虚拟IP地址通过双机热备软件自动将虚拟IP地址解析到备机的实IP地址上，这时，虚拟IP地址指向备机的实IP地址。但对用户来说，用户访问的仍然是虚拟IP地址。所以用户只会在切换的过程中发现有短暂的通信中断，经过一个短暂的时间，就可以恢复通信。 </li>
<li>(3)应用及网络故障切换过程 </li>
<li>(i)可以检测到操作系统的故障并及时将服务切到备用服务器。（如图1） </li>
<li>(ii)当操作系统正常的情况下，数据库系统出现意外故障，这时双机容错软件可以及时发现并将其切到备用服务器，使服务不致于停止。（如图2） </li>
<li>(iii)当操作系统和数据库系统全都正常的情况下，服务器网络出现故障，这时双机热备软件，可以将系统切到正常的备用服务器上。 </li>
</ul>
<h2 id="二-双机热备模式">二.双机热备模式</h2>
<p>双机热备有两种实现模式，一种是基于共享的存储设备的方式即双机热备容错方式，另一种是没有共享的存储设备的方式，一般称为镜像方式。 </p>
<ul>
<li>双机热备容错方式<br>基于存储共享的双机热备是双机热备的最标准方案。<br>对于这种方式，采用两台服务器，使用共享的存储设备（磁盘阵列柜或存储区域网SAN）。两台服务器可以采用互备、主从、并行等不同的方式。在工作过程中，两台服务器将以一个虚拟的IP地址对外提供服务，依工作方式的不同，将服务请求发送给其中一台服务器承担。同时，服务器通过心跳线(目前往往采用建立私有网络的方式)侦测另一台服务器的工作状况。当一台服务器出现故障时，另一台服务器根据心跳侦测的情况做出判断，并进行切换，接管服务。对于用户而言，这一过程是全自动的，在很短时间内完成，从而对业务不会造成影响。由于使用共享的存储设备，因此两台服务器使用的实际上是一样的数据，由双机或集群软件对其进行管理。 </li>
<li>双机热备镜像方式<br>对于镜像的方式，则是通过支持镜像的双机软件，将数据可以实时复制到另一台服务器上，这样同样的数据就在两台服务器上各存在一份，如果一台服务器出现故障，可以及时切换到另一台服务器。<br>镜像方式还有另外一种情况，即服务器只是提供应用服务，而并不保存数据（比如只进行某些计算，做为应用服务器使用）。 </li>
<li>双机容错软件：<br>软件、硬件配置</li>
<li>a、软件：双机热备容错软件。</li>
<li>b、硬件：服务器可以是任何Intel基础上的平台， Server的型号、配置不必一致，只需硬件平台能保证Windows NT/2K/Linux/Unix运行；磁盘阵列正常使用。 </li>
</ul>
<h2 id="二-双机热备容错软件原理">二.双机热备容错软件原理</h2>
<ul>
<li>1.双机热备容错软件定义、特性、资源保护<br>双机热备容错软件提供了一个完全容错的软件解决方案，并提供数据、应用程序和通信资源的高度可用性。双机热备容错软件不需要任何特别的容错硬件,并访问特定节点的配置数据。双机热备容错软件会自动地提供错误检测和现场恢复。<br>在出现故障的情况下，双机热备容错软件会将保护资源自动转换到一个根据预先设定好优先权的系统。在实际进行切换用户时， 会经历一个十分短暂的休眠，但是，当系统完成了切换操作后，双机热备容错软件会在所选择的节点上自动地恢复操作。<br>可以被双机热备容错软件保护起来的资源是：<br>卷（Volume） : 在共享磁盘阵列的双机方式下，双机热备软件可以对磁盘阵列的卷资源进行保护，防止因双机共同写同一个文件造成的故障。<br>IP 地址 : 双机热备软件可以对网络IP地址，网卡进行全方位的检测。<br>共享文件:可以对文件夹共享。<br>管理器服务器名称 : 可以对服务器名做集群热备。<br>应用程序: 可以对Oracle，Sybase，Informix，DB2，MSSQLServer数据库进行保护及检测功能。<br>定义的用户: 对用户自有程序做到实时检测及热备功能。 </li>
<li>2、心跳故障检测Heartbeat<br>双机热备容错软件在集群节点间保持着间歇的通信信号，也叫做心跳信号，是错误检测的一个机制。即通过每一个通信路径，在两个对等系统之间进行周期性的握手,如果连续没有收到的心跳信号到了一定的数目，双机热备容错软件就把这条路径标示为失效（红色）。<br>如果你只定义了一条通信路径，当双机热备容错软件把这唯一的一条通信路径标为失效时， 双机热备容错软件便立即开始恢复过程。然而，如果你有冗余路径， 双机热备容错软件能够通过第二条路径确定是系统故障还是只是通信路径有问题。如果双机热备容错软件开启优先级第二的通信路径并收到了心跳信号，它就不开始failover恢复，只需要把第一条通信路径标成红色（失效），作为信号告诉你需要修复有故障的路径。<br>一般情况下双机热备容错软件只在下列事件发生时，启动系统恢复功能：<br>所有的通信路径故障。如果所有节点都没能收到心跳信号， 把所有通信路径都标为失效， 双机热备容错软件开始安全检查。<br>安全检查失败。当所有通信路径故障时，双机热备容错软件向整个网络发出安全检查信号。如果信号指出配对系统还“活”着的时候，双机热备容错软件不启动Failover。如果安全检查没从配对节点返回信号，双机热备容错软件就开始Failover。<br>因而，为了减少由于潜在的通讯错误所引起的不必要的系统切换，建议您使用不同介质的多条通信路径。<br>通信路径<br>双机热备容错软件支持在节点之间和心跳通讯中，使用如下通讯路径：</li>
<li>(1) socket，即套接字。你使用任何的网络硬件接口，只要它能够支持TCP/IP的通讯协议。这样的硬件包括：以太网、快速以网。</li>
<li>(2)串行口 在双机热备容错软件配置中， 你应当配置有一个串行口通信路径。串口通信路径需要利用RS232的拟调解线路来与双机热备容错软件系统相连接。<br>双机热备容错软件假定当通过心跳信号检测其它服务器失败时，则认为此服务器是关闭的。因此，为了避免不必要的失效切换，最好建立两种以上独立的物理路径，使用至少两种心跳。<br>例如，如果两个服务器被一个串口连接起来，并且，从属服务器来的心跳信号无法被主服务器所检测到，则下面之一是可能引起这一现象的原因：<br>服务器的RS- 232卡或者端口 失败电缆失效<br>主服务器暂时挂起 主服务器失败<br>失效切换只可能在最后一种情况下才发生。因此，节点间的多种通信路径可以帮助避免不必要的失效切换 </li>
</ul>
<h2 id="三-双机热备容错软件工作方式">三.双机热备容错软件工作方式</h2>
<ul>
<li>Active/Standby，Ａctive/Active</li>
<li>Active/Standby 方式是传统的双机热备份解决方案，主机运行时，备机处于备用状态，当主机故障时，备机马上启动将服务接替。因备机平台没有其它的访问量，所以故障切换后用户访问速度不会有大的影响，此种容错方式主要适用于用户只有一种应用，主备机设备配置不太一样，并且用户访问量大的情况。 </li>
<li><p>在一个激活/备用对中， 主节点处于处理状态，从属节点处于备用状态，以防主节点上发生失败。备用系统可以是一个小一点、性能低一点的系统，但是，当主节点失败时，它必须有保证资源可达性的处理能力。例如，假设Server1是主“激活”节点，Server2是次“备用”节点。如果Server1发生故障了，它的被保护资源由Server2 节点来恢复。当节点Server1恢复后， 资源可以被Server1重新获得。然而，当Server2 节点失败时，Server2节点上并没有需要被Server1节点恢复的资源。 </p>
</li>
<li><p>Active/Active 这种方式的主备机平时各自有一种应用运行，当系统中的任何一台主机出现故障，应用都会集中到一台服务器上运行，此时这台备用服务器不仅要承担以前的程序运行而且还要运行宕机服务器上的应用程序，所以此时备机的负担会加重。这种方式的故障切换往往会造成备机访问量增大，系统运行变慢。此方式主要适合用户有不只一种应用，用户主备机配置一样且数据访问量不大的情况。 </p>
</li>
<li><p>在一个激活/激活对中， 两个节点都是激活的处理器，但是它们也可分别作为其对应节点上的资源和资源层次的从属节点。在激活/激活的图表中，有两个主要应用：应用A 处于Volume w中，并且在Server1上激活。APPB存储在Volume M上，并且在Server2上激活。在这一配置中，Server1应该是Volume W：资源的主节点，Server2应该是Volume M：资源的主节点。</p>
</li>
<li>当Server2失败时， 双机热备容错软件应该将Volume M：转换到Server1上去。如果系统资源是足够的，这一转换不会影响到已经在Server1上运行的应用A，转换只是简单地将Server2上的被保护应用程序（B）加到Server1的运行负载上 </li>
</ul>
<h2 id="四-双机热容错软件备运行机制">四.双机热容错软件备运行机制</h2>
<ul>
<li>1、共享的SCSI 和双机热备容错软件锁定<br>双机热备容错软件锁定：双机热备容错软件管理共享磁盘上的数据，以防止多个服务器在同一时间访问数据。双机热备容错软件在逻辑设备级（卷）上控制对数据的访问，并Windows/Linux软件或硬件RAID Controllers 管理物理级。有了双机热备 容错软件来管理对共享数据的访问，用户就可以不必担心群中的其它服务器访问数据时， 可能会带来的数据访问冲突。双机热备容错软件自动在被应用程序定义为共享资源的磁盘卷上设置锁定。当被保护的应用程序由一个服务器被移动/转换到另一个服务器时， 双机热备 容错软件控制这些锁定，以保证激活服务器对共享卷的访问。<br>在主系统发生故障的情况下， 次节点系统将能够在磁盘上建立SCSI 锁定，并在备份的系统上将资源投入使用。 </li>
<li>2、Local Recovery（局部恢复）<br>双机热备容错软件在应用软件的检测时间间隔执行预先定义的行为，以察看资源本身是否失效。如果快速检查和深入检查均局部告失败，系统将尝试局部恢复资源。如果尝试成功，资源将不会向下一优先级的节点进行失效切换（failover）。如果局部恢复尝试失败，系统将向下一优先级的节点进行失效切换。</li>
<li>3、Failover（失效切换）<br>指定主要的节点或资源失败时，重新恢复资源的过程。一个失效切换通常是没有事先计划的，它将发生在一个被从属系统所检测到并确定为失败的情况下。 </li>
<li>4、 Switchback（可配置的迁回）<br>Configurable Switchback（CS ）允许双机热备容错软件管理员通过命令行或GUI界面来指定资源，其所在服务器发生故障而后又恢复正常，该资源将被自动地切换回到原来节点上。如果选择Auto Switchback，那么，一旦发生故障的节点回到服务状态时，被配置失效切换的层次都将被切换回到该节点上。如果策略没有选定Auto Switchback，即使当发生故障的节点回到服务状态时，被配置失效切换的层次也会留在它们被失效切换到的节点上，等待由管理员决定合适的时间进行切换。 </li>
<li>5、Switchover（正常切换）<br>指用一个有顺序的方式关闭资源，然后将它们恢复到一个备份系统的过程。这通常发生在当你处于维护或者测试模式中的情况下。这时，没有任何东西失败。 </li>
</ul>
<h2 id="五-_双机热备容错软件的优点">五. 双机热备容错软件的优点</h2>
<p>最大限度地保护用户端的应用连续性。用户的硬件资源(如网卡，软件资源如NT操作系统、数据库管理系统、数据库应用系统、电子邮件系统等)均能处于双机热备容错软件的保护之下，当这些被保护资源出现技术故障时，双机热备容错软件可随时实施系统资源切换。如此，双机热备容错软件真正实现了用户硬件或是软件资源发生故障时系统及应用层上的在线热切换。<br>双机热备容错软件在镜像或共享磁盘阵列任意方式下，均能实现两台服务器各自运行不同应用且相互热备份，即实现双Active运转模式。<br>双机热备容错软件占用系统资源极少，不增加网络负荷，且不打扰任何具体应用系统的任何操作。<br>双机热备容错软件真正实现无人值守，全自动地实现应用资源切换，且图形界面操作，简单方便。<br>可支持Notes、ExcClusternge、SQL Server、Sybase、Informix、Oracle 、SAP等多种系统的应用层热恢复。 </p>
<p>双机镜像软件： </p>
<p>使用带有双机镜像功能的双机热备容错软件来进行配置，其中 Server1 是主服务器，Server2 是从服务器。<br>当一个客户向 Server1上的镜像文件夹发出写命令，双机镜像软件保证写命令通过网络送给 Server2，Server2上的写操作成功完成时，Server1上的写操作才能完成。因此，两处系统能够同时更新，因此主、从服务镜像文件夹中的数据一致性得以保证。<br>软件、硬件配置</p>
<ul>
<li>1、软件：双机热备 和双机镜像</li>
<li>2、硬件：服务器可以是任何INTEL基础上的平台，两台Server的型号、配置不必一致，只需硬件平台能保证系统运行 </li>
</ul>
<h2 id="二-双机镜像软件原理">二.双机镜像软件原理</h2>
<ul>
<li>1.双机镜像简介<br>双机镜像是一种软件产品，专为Windows/Linux系统设计的客户/服务器环境下一种有效、高性能的高可用性解决方案。单独使用双机镜像软件，无需较贵的RAID磁盘子系统，无需考虑小型计算机系统接口（SCSI）对缆线长度的限制，去除了单点故障（磁盘阵列子系统）。集群计算机环境所要考虑的主要问题是系统总开销，而使用双机镜像软件的双机热备 容错软件 是解决这个问题的首选方案。公司只需最小的硬件集成便可以得到低价、高可用性的方案。<br>双机镜像软件在局域网的服务器之间提供完全基于软件的镜像。一个服务器被指定为主服务，另一个为从服务器。客户只能对主服务器上的镜像文件夹进行读或写，从服务器上相应的文件夹被锁定以防对数据的存取，除非在主服务器上检测到故障状态。这是实现一个高性能方案要考虑的一个重要问题，因为数据的完整性是主要因素。尽管双机镜像软件可以单独使用，但是与双机热备和容错软件配合使用会显著增强它的功能。 </li>
<li><ol>
<li>双机镜像特性<br>在双机镜像环境下，一个镜像是主服务器上的一个或多个文件夹，而不是整块硬盘或分区，其内容与从服务器上的相关磁盘通过LAN同步。双机镜像软件使磁盘上的文件镜像的创建更为容易。<br>在文件镜像建立后，主服务器和从服务器上的文件夹已经同步，并且两个服务器都已启动运行，出现下面的事件：<br>最初的镜像建立后，系统禁止所有用户存取从服务器的镜像文件，不允许对从服务器上的镜像文件读和写。主服务器镜像则可以进行读和写操作。<br>无论何时主服务器收到一个写请求，系统首先决定这个请求是否针对某个镜像文件夹。如果不是，写操作可以完全正常的完成。<br>当从系统返回一个成功状态时，主系统在自己的镜像文件夹中执行写操作，并返回到请求方。如果从系统执行镜像文件夹写操作时发生错误，那么从系统上的写操作将被中止，主系统结束自己的镜像文件夹写请求。 </li>
</ol>
</li>
<li><ol>
<li>双机镜像特性<br>A. 双机热备提供的全系统检测功能与双机镜像的文件镜像功能相辅相承，使双机热备系统无需昂贵的磁盘阵列子系统。<br>B. 使用双机镜像将数据由一个主机系统镜像到另一个主机系统，并与双机热备相结合，可有效的避免磁盘阵列子系统中单点故障的可能性。<br>C. 当主备服务器发生切换时。双机镜像开机后并不是以整盘再将备机数据分区或硬盘全部复制到主服务器，而是将备机中变化的数据部分复制到主服务器，如图所。减少了数据复制的时间，同时也增加了数据的安全性。 </li>
</ol>
</li>
<li><ol>
<li>具备远程的灾难复原能力<br><em>双机镜像在服务器端的数据复制能力。
</em>双机镜像有在局域网和广域网的数据复制能力。<br>*所有双机镜像都可以配合双机热备软件，实现异地的数据备份功能。 </li>
</ol>
</li>
</ul>
<h2 id="三-双机镜像软件工作方式">三.双机镜像软件工作方式</h2>
<p>Active/Standby<br>在一个激活/备用图表中， 应用A在server1上运行，server2处于备用状态，以防主server1上发生失败。当Server1发生故障时，被保护资源由Server2 节点来恢复。当节点Server1恢复后， 资源可以被Server1重新获得。然而，当Server2 节点失败时，Server2节点上并没有需要被Server1节点恢复的资源。 </p>
<p>Active/ Active<br>在激活/激活的图表中，有两个主要应用： 应用A 处在Server1上激活。应用B在Server2上激活。当Server2失败时， 双机热备镜像软件应该将应用B转换到Server1上去。如果系统资源是足够的，这一转换不会影响到已经在Server1上运行的应用A，转换只是简单地将Server2上的被保护应用程序应用B加到Server1的运行负载上<br>双机镜像具有以上两种工作方式，可支持两个Server系统。 </p>
<h2 id="四-双机镜像软件运行机制">四.双机镜像软件运行机制</h2>
<ul>
<li>I、通讯路径<br>“Heartbeat”是服务器间发出的周期性检测信息，它允许双机热备容错软件决定服务器的状态。当一个服务器向另一处服务器发送一个“Heartbeat”消息，并且在规定时间段里没有得到任何回应时， 发送消息的服务器开始评测接收消息的服务器是否正在发生故障。多种“Heartbeat”检测信号保证故障检测的可靠性，以防止不必要的资源服务切换。双机热备 容错软件为双机热备镜像提供下列途径上的“Heartbeat”通信：<br>Socket （TCP/IP ）<br>RS- 232 TTY通信端口（Communications port ）<br>双机热备镜像软件消除了共享SCSI 的需要。 </li>
<li>II、主服务器发生故障<br>客户向Server1上运行的一个程序发送一个请求，而Server1出现写错误时，使用带有双机热备镜像功能的双机热备 容错软件能够检测出系统失败。然后，双机热备 容错软件 执行恢复规则，试图关闭Server1上的应用，并且在Server2上重新启动它们。Server2现在承担主服务器的角色，镜像文件夹地址从Server1转移到Server2上去，这个转换过程对用户来说是透明的，客户一般不会发现系统曾经发生这样的故障。<br>一旦系统发生的故障被被纠正过来，管理员必须重新同步镜像文件夹。重新同步这些文件夹并被锁定，目的是不接受任何客户的存取。在这个过程中，非镜像应用不会受到影响，因此这些应用可以毫无干扰的继续运行。系统管理员可以选择何时对镜像文件夹进行同步，通过提供选择时间的灵活性达到对整个系统的影响减为最小。<br>重新同步主服务器和从服务器上镜像的时间依赖于文件夹的大小。 一般情况下，在100MB 以太网上， 恢复1Gigabyte（GB）的数据只需要10分钟。 <h3 id="III、从服务器发生故障">III、从服务器发生故障</h3>
当从系统发生故障时，受影响的镜像文件夹标志为Broken。有必要纠正这些故障，并重新同步有关的文件夹。当从系统发生故障时，任何写请求不会送给从系统。当从服务器发生故障后再次恢复时，镜像管理器用来重新同步主镜像文件夹和从镜像文件夹 </li>
</ul>
<h2 id="五-双机镜像软件的优点">五.双机镜像软件的优点</h2>
<ul>
<li>1、避免了磁盘阵列的单点故障：对于双机热备，本身即是防范由于单个设备的故障导致服务中断，但磁盘阵列恰恰又形成了一个新的单点。（比如，服务器的可靠系数是99.9%, 磁盘阵列的可靠系数是99.95%，则纯软双机的可靠系数是1- 99.9%x99.9%=99.99%，而基于磁盘阵列的双机热备系统的可靠系数则会是略低于99.95% </li>
<li>2、节约硬盘：不需购买昂贵的磁盘阵列。 </li>
<li>3、不受距离的限制：两台服务器不需受SCSI电缆的长度限制（光纤通道的磁盘阵列也不受距离限制，但**会大得多）。这样，可以更灵活地部署服务器，包括通过物理位置的距离来提高安全性。 </li>
</ul>
<h1 id="其他：">其他：</h1>
<h2 id="一-怎么选择双机？">一.怎么选择双机？</h2>
<p>决定是否使用双机热备，正确的方法是要分析一下系统的重要性以及对服务中断的容忍程度，以此决定是否使用双机热备。即，你的用户能容忍多长时间恢复服务，如果服务不能恢复会造成多大的影响。<br>在考虑双机热备时，需要注意，一般意义上的双机热备都会有一个切换过程，这个切换过程可能是一分钟左右。在切换过程中，服务是有可能短时间中断的。但是，当切换完成后，服务将正常恢复。因此，双机热备不是无缝、不中断的，但它能够保证在出现系统故障时，能够很快恢复正常的服务，业务不致受到影响。而如果没有双机热备，则一旦出现服务器故障，可能会出现几个小时的服务中断，对业务的影响就可能会很严重。<br>建议采取以下的步骤与方法： </p>
<ul>
<li>第一，了解清楚应用环境。<br>在这一步骤要以应用为主导，进行认真的分析。应该明确以下事项： </li>
<li>1、有哪些服务器在运行 </li>
<li>2、服务器的操作系统与数据库系统、应用软件都是什么 </li>
<li>3、使用什么样的应用系统 </li>
<li>4、能够承担多长时间的服务中断 </li>
<li>5、数据量、数据写入的频繁程度 </li>
<li>6、硬件条件 </li>
<li>7、大致的预算 </li>
<li>第二，确定双机热备方案的模式。 </li>
<li>1、决定要不要备、谁和谁备。采用数据库双机热备，应用服务器集群，是主从方式还是互备？亦或是多台服务器？ </li>
<li>2、决定如何备。就双机热备而言，是采用共享的存储设备，还是采用基于镜像的纯软件方式。 </li>
<li>第三，选择确定具体的设备、软件的型号。<br>要特别注意的是，不同的软件、存储设备之间存在兼容性的问题，因此一定要统一考虑，并提前及时咨询专业人员。切忌出现采购了双机软件对相关的存储设备不兼容等问题。 </li>
<li>1、产品是否能支持所要求的应用方式 </li>
<li>2、产品是否能支持所使用的应用环境 </li>
<li>第四，产品的其他特性： </li>
<li>1、是否支持远程监控（可以使你不用非要经常跑到机房，才知道是否一台服务器宕机了）？ </li>
<li>2、界面语言（对双机软件，中文界面并不是非常重要，但也是一个因素。同时，是否有中文手册等则可能非常重要）。 </li>
<li>3、安装的难易程度 。 </li>
<li>第五、售后服务 </li>
<li>1、是否存在合法的供货渠道？(直接关系到产品是否能得到长期可靠的服务！！！)</li>
<li>2、是否需要安装服务？需要什么样的售后服务？服务要求是否有保障？ </li>
</ul>
<h2 id="二-双机热备与数据备份的关系">二.双机热备与数据备份的关系</h2>
<p>一些用户在规划双机热备或双机备份时，会有这样的问题：我已经有了RAID，以及磁带备份，还有必须做双机吗？或者，如果我做了双机备份，还有必要做磁带备份吗？<br>应该说RAID和数据备份都是很重要的。但是，RAID技术只能解决硬盘的问题，备份只能解决系统出现问题后的恢复。而一旦服务器本身出现问题，不论是设备的硬件问题还是软件系统的问题，都会造成服务的中断。因此，RAID及数据备份技术不能解决避免服务中断的问题。对于需要持续可靠地提供应用服务的系统，双机还是非常重要的。只要想一想，如果你的服务器坏了，你要用多少时间将其恢复到能正常工作，你的用户能容忍多长的恢复时间就能理解双机的重要性了。<br>从另外一个方面，RAID以及磁带备份也是非常需要的。对于RAID而言，可以以很低的成本大大提高系统的可靠性，而且其复杂程度远远低于双机。因为毕竟硬盘是系统中机械操作最频繁、易损率最高的部件，如果采用RAID，就可以使出现故障的系统很容易修复，也减少服务器停机进行切换的次数。<br>数据备份更是必不可少的措施。因为不论RAID还是双机，都是一种实时的备份。任何软件错误、病毒影响、误操作等等，都会同步地在多份数据中发生影响。因此，一定要进行数据的备份（不论采取什么介质，都建议用户至少要有一份脱机的备份），以便能在数据损坏、丢失时进行恢复。</p>
<h2 id="三-双机与集群的关系">三.双机与集群的关系</h2>
<p>在双机热备应用方面，有两大类软件产品。一类是双机软件(HA)，另一类则称作集群软件(Cluster)，这两类软件是有差异的。<br>它们都是为实现系统的高可用性服务的，都解决了一台服务器出现故障时，由其他服务器接管应用，从而持续可靠地提供服务的问题。<br>它们都是通过心跳技术在进行系统检测。<br>但是，双机软件只能支持两台服务器以主从方式或互备方式工作。而集群软件除了支持双机工作外，还可以支持多台服务器(Multi Node)工作，同时部署多个应用，并在多个服务器间灵活地设置接管策略。<br>在两种情况下需要使用集群软件：一是有超过两个应用，本身就需要部署三台或更多的服务器。二是只有两个应用，但每个应用的负载均较大，不宜采用双机互备的方式，而是需要由第三台服务器来作为这两个应用的备机。<br>一般地讲，集群软件具有更多的技术含量，具备更高的可靠性。同时，往往价格(平均到每台服务器)也高于双机软件。<br>在选择产品时，应根据应用的实际情况来确定。最理想的方式，则是在应用数量少、负载不是很大时先使用双机软件，然后在应用数量增多、负载增大时平滑过渡到集群软件。 </p>
]]></content>
    <summary type="html">
    <![CDATA[从广义上讲，就是对于重要的服务，使用两台服务器，互相备份，共同执行同一服务。当一台服务器出现故障时，可以由另一台服务器承担服务任务，从而在不需要人工干预的情况下，自动保证系统能持续提供服务。]]>
    
    </summary>
    
      <category term="双机热备" scheme="http://www.prokitty.com/tags/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/"/>
    
      <category term="心跳频率" scheme="http://www.prokitty.com/tags/%E5%BF%83%E8%B7%B3%E9%A2%91%E7%8E%87/"/>
    
      <category term="集群" scheme="http://www.prokitty.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="备份" scheme="http://www.prokitty.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[经常遇到的Linux问题]]></title>
    <link href="http://www.prokitty.com/2015/02/11/linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://www.prokitty.com/2015/02/11/linux常见问题整理/</id>
    <published>2015-02-10T16:57:00.000Z</published>
    <updated>2015-02-10T14:11:42.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>1 如何查看当前的Linux服务器的运行级别？</p>
<p>答: <code>who -r</code> 和 <code>runlevel</code> 命令可以用来查看当前的Linux服务器的运行级别。</p>
</li>
<li><p>2 如何查看Linux的默认网关？</p>
<p>答: 用 <code>route -n</code> 和<code>netstat -nr</code> 命令，我们可以查看默认网关。除了默认的网关信息，这两个命令还可以显示当前的路由表。</p>
</li>
<li><p>3 如何在Linux上重建初始化内存盘镜像文件？</p>
<p>答: 在CentOS 5.X / RHEL 5.X中，可以用mkinitrd命令来创建初始化内存盘文件，举例如下：</p>
<p><code># mkinitrd -f -v /boot/initrd-$(uname -r).img $(uname -r)</code></p>
<p>如果你想要给特定的内核版本创建初始化内存盘，你就用所需的内核名替换掉 <code>uname -r</code>。</p>
<p>在CentOS 6.X / RHEL 6.X中，则用dracut命令来创建初始化内存盘文件，举例如下：</p>
<p><code># dracut -f</code></p>
<p>以上命令能给当前的系统版本创建初始化内存盘，给特定的内核版本重建初始化内存盘文件则使用以下命令：</p>
<p><code># dracut -f initramfs-2.x.xx-xx.el6.x86_64.img 2.x.xx-xx.el6.x86_64</code></p>
</li>
<li><p>4 cpio命令是什么？</p>
<p>答: cpio就是复制入和复制出的意思。cpio可以向一个归档文件（或单个文件）复制文件、列表，还可以从中提取文件。</p>
</li>
<li><p>5 patch命令是什么？如何使用？</p>
<p>答: 顾名思义，patch命令就是用来将修改（或补丁）写进文本文件里。patch命令通常是接收diff的输出并把文件的旧版本转换为新版本。举个例子，Linux内核源代码由百万行代码文件构成，所以无论何时，任何代码贡献者贡献出代码，只需发送改动的部分而不是整个源代码，然后接收者用patch命令将改动写进原始的源代码里。</p>
<p>创建一个diff文件给patch使用，</p>
<p><code># diff -Naur old_file new_file &gt; diff_file</code></p>
<p>旧文件和新文件要么都是单个的文件要么都是包含文件的目录，-r参数支持目录树递归。</p>
<p>一旦diff文件创建好，我们就能在旧的文件上打上补丁，把它变成新文件：</p>
<p><code># patch &lt; diff_file</code></p>
</li>
<li><p>6 aspell有什么用 ?</p>
<p>答: 顾名思义，aspell就是Linux操作系统上的一款交互式拼写检查器。aspell命令继任了更早的一个名为ispell的程序，并且作为一款免费替代品 ，最重要的是它非常好用。当aspell程序主要被其它一些需要拼写检查能力的程序所使用的时候，在命令行中作为一个独立运行的工具的它也能十分有效。</p>
</li>
<li><p>7 如何从命令行查看域SPF记录？</p>
<p>答: 我们可以用dig命令来查看域SPF记录。举例如下：</p>
<p><code># linuxtechi@localhost:~$ dig -t TXT google.com</code></p>
</li>
<li><p>8 如何识别Linux系统中指定文件(/etc/fstab)的关联包？</p>
<p>答:<code># rpm -qf /etc/fstab</code></p>
<p>以上命令能列出提供<code>/etc/fstab</code>这个文件的包。</p>
</li>
<li><p>9 哪条命令用来查看bond0的状态？</p>
<p>答: <code>#cat /proc/net/bonding/bond0</code></p>
</li>
<li><p>10 Linux系统中的/proc文件系统有什么用？</p>
<p>答: /proc文件系统是一个基于内存的文件系统，其维护着关于当前正在运行的内核状态信息，其中包括CPU、内存、分区划分、I/O地址、直接内存访问通道和正在运行的进程。这个文件系统所代表的并不是各种实际存储信息的文件，它们指向的是内存里的信息。/proc文件系统是由系统自动维护的。</p>
</li>
<li><p>11 如何在/usr目录下找出大小超过10MB的文件？</p>
<p>答:<code># find /usr -size +10M</code></p>
</li>
<li><p>12 如何在/home目录下找出120天之前被修改过的文件？</p>
<p>答:<code># find /home -mtime +120</code></p>
</li>
<li><p>13 如何在/var目录下找出90天之内未被访问过的文件？</p>
<p>答:<code># find /var \! -atime -90</code></p>
</li>
<li><p>14 在整个目录树下查找文件<code>core</code>，如发现则无需提示直接删除它们。</p>
<p>答:<code># find / -name core -exec rm {} \;</code></p>
</li>
<li><p>15 strings命令有什么作用？</p>
<p>答: strings命令用来提取和显示非文本文件中的文本字符串。（LCTT 译注：当用来分析你系统上莫名其妙出现的二进制程序时，可以从中找到可疑的文件访问，对于追查入侵有用处）</p>
</li>
<li><p>16 tee 过滤器有什么作用 ?</p>
<p>答: tee 过滤器用来向多个目标发送输出内容。如果用于管道的话，它可以将输出复制一份到一个文件，并复制另外一份到屏幕上（或一些其它程序）。</p>
<p><code># linuxtechi@localhost:~$ ll /etc | nl | tee /tmp/ll.out</code></p>
<p>在以上例子中，从ll输出可以捕获到 <code>/tmp/ll.out</code> 文件中，并且同样在屏幕上显示了出来。</p>
</li>
<li><p>17 <code>export PS1 = ”$LOGNAME@hostname:\$PWD:</code>这条命令是在做什么？</p>
<p>答: 这条export命令会更改登录提示符来显示用户名、本机名和当前工作目录。</p>
</li>
<li><p>18 <code>ll | awk ‘{print $3,”owns”,$9}’</code>这条命令是在做什么？</p>
<p>答: 这条ll命令会显示这些文件的文件名和它们的拥有者。</p>
</li>
<li><p>19 :Linux中的at命令有什么用？</p>
<p>答: at命令用来安排一个程序在未来的做一次一次性执行。所有提交的任务都被放在 <code>/var/spool/at</code>目录下并且到了执行时间的时候通过atd守护进程来执行。</p>
</li>
<li><p>20 linux中lspci命令的作用是什么？</p>
<p>答: lspci命令用来显示你的系统上PCI总线和附加设备的信息。指定-v，-vv或-vvv来获取越来越详细的输出，加上-r参数的话，命令的输出则会更具有易读性。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[linux常见问题整理。]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nagios监控服务配置]]></title>
    <link href="http://www.prokitty.com/2015/02/10/Nagios%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.prokitty.com/2015/02/10/Nagios监控服务配置/</id>
    <published>2015-02-10T04:57:00.000Z</published>
    <updated>2015-02-10T14:03:26.000Z</updated>
    <content type="html"><![CDATA[<p>Nagios是一个监控运行状态和网络信息的监视系统。Nagios能监听远程和本地服务器服务，提供异常通知功能，也可以在Web页面查看监控信息、监控日志。</p>
<h1 id="一、Nagios特点：">一、Nagios特点：</h1>
<ul>
<li><p>网络监视服务（SMTP,POP3,HTTP,NNTP,PING）</p>
</li>
<li><p>服务器监视（服务器磁盘，服务器进程）</p>
</li>
<li><p>可添加插件对Nagios监视服务进行扩展</p>
</li>
<li><p>可并发处理监视服务</p>
</li>
</ul>
<p>相关安装包：</p>
<ul>
<li><p>Nagios core</p>
</li>
<li><p>Nagios plugins </p>
</li>
<li><p>Nagios addons</p>
</li>
</ul>
<h1 id="二、服务器端：">二、服务器端：</h1>
<p>查看安装服务器环境（LAMP）</p>
<p><code># rpm -qa | grep httpd</code></p>
<p><code># rpm -qa | grep php</code></p>
<p>没有的话安装</p>
<p><code># yum -y install gcc glibc glibc-common gd gd-devel php openssl-devel httpd</code></p>
<p>创建用户：</p>
<p><code># useradd -m -s /bin/bash nagios</code></p>
<p><code># groupadd nagios</code></p>
<p><code># usermod -G nagios nagios</code></p>
<p><code># vi /etc/passwd</code></p>
<p>将其中的<code>nagios:x:500:500::/home/nagios:/sbin/nologin</code>改成：<code>nagios:x:500:500::/home/nagios:/bin/bash</code></p>
<p>创建一个用户组名为nagcmd 用于从Web接口执行外部命令。将nagios用户和apache用户都加到这个组中。</p>
<p>因为要用到 CGI 的 Web 监控面板，所以这里我们还要添加一个 nagcmd 组，用于 CGI 执行相关指令。</p>
<p><code># /usr/sbin/groupadd nagcmd</code></p>
<p><code># /usr/sbin/usermod -G nagcmd nagios</code></p>
<p><code># /usr/sbin/usermod -a -G nagcmd daemon</code>(因为是编译方式安装的apache，默认是以daemon用户运行)</p>
<p>下载相关的软件包，服务器端需要安装以下三个包，客户端只需要安装后两个插件包：</p>
<p><code>[root@server ~]#cd /usr/local/src/tarbag/</code></p>
<p><code>[root@server tarbag]#wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.2.tar.gz</code></p>
<p><code>[root@server tarbag]#wget http://prdownloads.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.15.tar.gz</code></p>
<p><code>[root@server tarbag]#wget http://prdownloads.sourceforge.net/sourceforge/nagios/nrpe-2.12.tar.gz</code></p>
<p>解压并编译安装Nagios：</p>
<p><code># tar xvzf nagios-3.2.2.tar.gz</code></p>
<p><code># cd nagios-3.2.2</code></p>
<p>运行Nagios配置脚本并使用先前开设的用户及用户组：</p>
<p><code># ./configure --prefix=/usr/local/nagios --with-command-group=nagcmd</code></p>
<p>编译Nagios程序包源码：</p>
<p><code># make all</code></p>
<p>安装二进制运行程序、初始化脚本、配置文件样本并设置运行目录权限：</p>
<p><code># make install</code></p>
<p><code># make install-init</code> //在/etc/rc.d/init.d安装启动脚本</p>
<p><code># make install-config&amp;nbsp</code>//安装示例配置文件,安装的路径是<code>/usr/local/nagios/etc</code></p>
<p><code># make install-commandmode&amp;nbsp</code>//配置目录权限</p>
<p><code># ls /usr/local/nagios/</code></p>
<p><code># bin etc libexec sbin share var</code></p>
<h1 id="三、对nagios进行配置:">三、对nagios进行配置:</h1>
<p>样例配置文件默认安装在这个目录下<code>/usr/local/nagios/etc</code>，这些样例文件可以配置Nagios使之正常运行，只需要做一个简单的修改…</p>
<p>用你擅长的编辑器软件来编辑这个<code>/usr/local/nagios/etc/objects/contacts.cfg</code>配置文件，更改email地址nagiosadmin的联系人定义信息中的EMail信息为你的EMail信息以接收报警内容。</p>
<p><code># vi /usr/local/nagios/etc/objects/contacts.cfg</code></p>
<h2 id="1、安装nagios插件">1、安装nagios插件</h2>
<p><code># cd ../</code></p>
<p><code># tar zxvf nagios-plugins-1.4.16.tar.gz</code></p>
<p><code># cd nagios-plugins-1.4.16</code></p>
<p><code># ./configure --with-nagios-user=nagios --with-nagios-group=nagios --prefix=/usr/local/nagios</code>//指定安装目录及用户和组</p>
<p><code># make;make install</code></p>
<p>配置httpd`生成Nagios的Apache配置文件</p>
<p><code># cd nagios-3.2.2</code></p>
<p><code># make install-webconf</code></p>
<p><code># /usr/bin/install -c -m 644 sample-config/httpd.conf /etc/httpd/conf.d/nagios.conf</code></p>
<p><code># cd sample-config</code></p>
<p>参考sample-config/httpd.conf配置内容添加到Apache的httpd.conf配置文件中</p>
<p>创建一个nagiosadmin的用户用于Nagios的Apache接口登录。记下你所设置的登录口令，一会儿你会用到它。</p>
<p><code># ./htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin</code></p>
<p>密码：nagiosmonitor</p>
<p>重启Apache服务以使设置生效。安装NRPE插件，想获取客户机上更为详细的信息，还必须在服务器及客户端上安装NRPE插件。</p>
<p><code># cd ..</code></p>
<p><code># tar zxvf nrpe-2.14.tar.gz</code></p>
<p><code># cd nrpe-2.14</code></p>
<p><code># ./configure --with-nagios-user=nagios --with-nagios-group=nagios --prefix=/usr/local/nagios/</code></p>
<p><code># make all</code></p>
<p><code># make install-plugin;make install-daemon;make install-daemon-config</code></p>
<p><code># ls /usr/local/nagios/libexec/</code></p>
<p><code># check_apt check_ftp check_mailq check_overcr check_tcp　.......</code></p>
<p>验证Nagios的样例配置文件</p>
<p><code># /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg</code></p>
<p>如果没有报错，可以启动Nagios服务</p>
<p>启动httpd及nagios服务并验证</p>
<p><code># chkconfig --add nagios</code>//设置nagios及http开机自启动</p>
<p><code># chkconfig nagios on</code></p>
<p><code># chkconfig httpd on</code></p>
<p><code># service nagios start</code></p>
<p><code># service httpd start</code></p>
<h2 id="2、客户端安装">2、客户端安装</h2>
<p><code># useradd -s /sbin/nologin nagios</code> //添加nagios用户</p>
<p>安装nagios-plugins</p>
<p><code># tar -zxvf nagios-plugins-1.4.15.tar.gz</code></p>
<p><code># cd nagios-plugins-1.4.15</code></p>
<p><code># ./configure --prefix=/usr/local/nagios</code></p>
<p><code># make&lt;li&gt;# make install</code></p>
<p><code># chown nagios.nagios /usr/local/nagios/</code></p>
<p><code># chown -R nagios.nagios /usr/local/nagios/libexec/</code></p>
<p>安装nrpe插件</p>
<p><code># tar -zxvf nrpe-2.12.tar.gz</code></p>
<p><code># cd nrpe-2.12</code></p>
<p><code># ./configure --prefix=/usr/local/nagios/</code></p>
<p><code># make all&lt;li&gt;# make install-plugin</code></p>
<p>安装check_nrpe这个插件</p>
<p><code># make install-daemon</code> 安装daemon</p>
<p><code># make install-daemon-config</code>安装配置文件</p>
<p>如果安装时报错：checking for SSL headers… configure: error: Cannot find ssl headers</p>
<p><code># rpm -qa|grep openssl</code></p>
<p><code># openssl-devel-0.9.8e-12.el5_4.6</code></p>
<p><code># openssl-0.9.8e-12.el5_4.6</code></p>
<p><code># yum install openssl-devel</code>或者下载：<a href="http://www.openssl.org/source/" target="_blank">http://www.openssl.org/source/</a></p>
<p><code># tar zxvf openssl-1.0.0a.tar.gz</code></p>
<p><code># cd openssl-1.0.0a</code></p>
<p><code># ./config</code></p>
<p><code># make;make test</code></p>
<p><code># make install</code></p>
<p>修改客户端配置文件</p>
<p><code># vi /usr/local/nagios/etc/nrpe.cfg</code></p>
<p><code># server_port:5666</code></p>
<p><code># allowed_hosts=127.0.0.1，192.168.1.95&amp;nbsp</code>//添加服务器端的IP地址</p>
<p>指定nagios监控主机ip,多个ip用逗号分隔，后面的IP地址，是nagios服务端的ip地址，也就是说只允许指定的ip通过nrpe开的端口5666取得本机的信息。</p>
<p>然后修改nrpe.cfg中的command部分。</p>
<p>启动NRPE守护进程：（可以将此命令加入/etc/rc.local，以便开机自动启动）</p>
<p><code># /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d</code></p>
<p>可以将此命令加入/etc/rc.local，以便开机自动启动</p>
<p><code># echo &quot;/usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d&quot; &gt;&gt; /etc/rc.local</code></p>
<p><code># netstat -utpln |grep nrpe</code>//查看nrpe进程是否已正常启动</p>
<p><code># /usr/local/nagios/libexec/check_nrpe -H 127.0.0.1 NRPE v2.14</code> //nrpe测试结果，此结果为nrpe已经正常工作了</p>
<p>然后在nagios监控服务器上测试</p>
<p><code># /usr/local/nagios/libexec/check_nrpe -H 192.168.1.77</code> //被监控主机ip</p>
<p>返回信息被监控服务器上安装的NRPE版本：NRPE v2.12</p>
<h2 id="3、定义监控内容">3、定义监控内容</h2>
<p><code># vi /usr/local/nagios/etc/nrpe.cfg</code>//定义监控服务器内容</p>
<p><code># command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10</code>#监控登陆的用户数量</p>
<p><code># command[check_load]=/usr/local/nagios/libexec/check_load -w 15,10,5 -c 30,25,20</code> #监控CPU的负载</p>
<p><code># command[check_sda2]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/sda2</code> #监控磁盘利用率，这里的sda2必须是实际的硬盘分区，可使用fdisk –l查</p>
<p><code># command[check_swap]=/usr/local/nagios//libexec/check_swap -w 20 -c 10</code>#监控交换空间</p>
<p><code># command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z</code> #监控进程中的僵尸进程</p>
<p><code># command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200</code>#监控所有进程</p>
<p>注意：command后面括号中的内容就是定义的变量，变量名可以任意指定，只需和服务器配置文件中的一致即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[Nagios是一个监控运行状态和网络信息的监视系统。Nagios能监听远程和本地服务器服务，提供异常通知功能，也可以在Web页面查看监控信息、监控日志。]]>
    
    </summary>
    
      <category term="Nagios" scheme="http://www.prokitty.com/tags/Nagios/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[负载均衡与高可用]]></title>
    <link href="http://www.prokitty.com/2015/02/09/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>http://www.prokitty.com/2015/02/09/负载均衡与高可用/</id>
    <published>2015-02-09T15:50:14.000Z</published>
    <updated>2015-02-10T14:20:57.000Z</updated>
    <content type="html"><![CDATA[]]></content>
    <summary type="html">
    <![CDATA[负载均衡高可用！]]>
    
    </summary>
    
      <category term="负载均衡" scheme="http://www.prokitty.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim中权限不足时不用退出而强制保存]]></title>
    <link href="http://www.prokitty.com/2015/02/08/vim%E4%B8%AD%E6%9D%83%E9%99%90%E4%B8%8D%E8%B6%B3%E6%97%B6%E4%B8%8D%E7%94%A8%E9%80%80%E5%87%BA%E8%80%8C%E5%BC%BA%E5%88%B6%E4%BF%9D%E5%AD%98/"/>
    <id>http://www.prokitty.com/2015/02/08/vim中权限不足时不用退出而强制保存/</id>
    <published>2015-02-08T08:27:00.000Z</published>
    <updated>2015-02-10T14:18:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="未输入sudo，vim不能退出保存">未输入sudo，vim不能退出保存</h1>
<p>在debian中，有时候忘记了输入sudo进行vim编辑，当编辑完了才发现无法退出保存，直接退出，之前的工作就白做了，真是两难啊。解决办法：</p>
<p>命令：</p>
<pre><code>:w !sudo tee %</code></pre>

<p>此命令是把当前文件（即%）作为stdin传给sudo tee命令来执行。说起来挺绕口，其实就是：用sudo强制保存。</p>
]]></content>
    <summary type="html">
    <![CDATA[only for your Debian vim!]]>
    
    </summary>
    
      <category term="Vim" scheme="http://www.prokitty.com/tags/Vim/"/>
    
      <category term="Linux" scheme="http://www.prokitty.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo免费静态博客安装和使用方法]]></title>
    <link href="http://www.prokitty.com/2015/02/07/Hexo%E5%85%8D%E8%B4%B9%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://www.prokitty.com/2015/02/07/Hexo免费静态博客安装和使用方法/</id>
    <published>2015-02-07T09:58:00.000Z</published>
    <updated>2015-02-10T14:15:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天换了台电脑，就发现不会安装hexo主题了，意识决定写一篇博客，加深下印象。</p>
<p>直接进入主题：</p>
<h1 id="1-搭建环境：">1.搭建环境：</h1>
<ul>
<li><p>下载并安装好github工具:<a href="http://www.freehao123.com/dl-msysgit/" target="_blank" rel="external">github下载地址</a></p>
</li>
<li><p>下载并安装好Node.js软件：<a href="http://www.freehao123.com/dl-node-js/" target="_blank" rel="external">Node.js软件地址（32位）</a></p>
</li>
</ul>
<h1 id="2-安装hexo：">2.安装hexo：</h1>
<ul>
<li><p>安装好了github和Node.js软件后，在自己希望存放主题的地方创建hexo目录，例如：F\hexo\。然后再目录里点击右键，选择git bash，进入git bash。</p>
</li>
<li><p>在bash中执行以下命令开始安装：</p>
<pre><code>npm install -g hexo</code></pre>
</li>
<li><p>装成功后，到Hexo文件目录中执行如下命令：</p>
<pre><code>hexo init <f\hexo\></f\hexo\></code></pre>，或者用CD的方法进入到指定的目录，再执行：
<pre><code>hexo init</code></pre>
</li>
<li><p>接下来是生成静态页面，输入如下命令：</p>
<pre><code>hexo generate</code></pre>
</li>
<li><p>接下来执行命令：<br><pre><code>hexo server</code></pre><br>接着在浏览器总打开<a href="http://localhost:4000就可以生成的博客页面了，当然主题是默认的。" target="_blank" rel="external">http://localhost:4000就可以生成的博客页面了，当然主题是默认的。</a></p>
</li>
</ul>
<p>-要将博文git到github上，用如下命令：</p>
<pre><code>hexo deploy <f\hexo\></f\hexo\></code></pre>

<p>根据github提示一步步填写用户名和密码即可。</p>
<h1 id="3-更换主题：">3.更换主题：</h1>
<ul>
<li>Hexo静态博客想要安装主题也容易，在Github上找到喜欢的主题，然后执行命令:</li>
</ul>
<pre><code>git clone https://github.com/A-limon/pacman.git themes/pacman
</code></pre>

<p>themes/pacman 是刚才创建的F\hexo目录中的，完整路径是：F\hexo\themes/pacman</p>
<ul>
<li><p>修改博客根目录下的config.yml配置文件中的theme属性，将其设置为pacman。同时请设置stylus属性中的compress值为true。</p>
</li>
<li><p>更新主题，更新之前先备份_config.yml 文件：</p>
</li>
</ul>
<pre><code>cd themes/pacman
git pull</code></pre>


<ul>
<li>配置主题：Pacman主题提供了丰富的配置属性，配置文件_config.yml位于主题根目录下。配置文件中已经包含了详细的英文注释和中文说明。</li>
</ul>
<pre><code>##### Menu
menu:
  Home: /
  Archives: /archives 

#### Widgets
widgets: 
- category
- tag
- rss

#### RSS
rss: 

#### Image
imglogo:
  enable: true
  src: /img/logo.svg 
  favicon: /img/favicon.ico 
  apple_icon: /img/pacman.jpg

#### Author Avatar Picture
author_img_enable: true
dataURI: false
author_img_data: 
author_img: /img/author.jpg

#### Font
ShowCustomFont: true  

#### Toc
toc:
  article: true 
  aside: true 

#### Fancybox
fancybox: true 

#### Author information
author:
  google_plus: 
  intro_line1: 
  intro_line2: 
  weibo: 
  twitter: 
  github: 
  facebook: 
  tsina: 

#### Comment
duoshuo: 
  enable: false        
  short_name: 

#### Share button
jiathis:
  enable: false  
  id: 
  tsina:

#### Analytics
google_analytics:
  enable: false
  id:
  site:

#### Custom Search
google_cse: 
  enable: false
  cx:</code></pre>


<blockquote>
<p>widgets: 提供了6种小工具。<br>-rss: 请填写你博客的RSS地址。</p>
</blockquote>
<p>-imglogo: 建议启用图片logo，格式建议为.svg或.png格式。同时建议提供配套的favicon以及在苹果设备上的图标（背景不要透明）。</p>
<p>-author_img_enable: 是否显示底部的作者头像。主题支持头像使用dataURI格式，若使用请修改dataURI的值为true并在下面的author_img_data后填上图片的值，确保它是一行而且被引号包住如果还是想用传统的jpg格式那么就把图片路径放在author_img后，同时把dataURI设置成false。</p>
<p>-ShowCustomFont: 启用自定义字体，如果你有一定前端基础可以修改font.styl替换为你喜欢的字体。</p>
<p>-toc: 是否启用在文章中或侧边栏中的目录功能。二者可以都为true或都为false。同时，如果你希望在特定的某一篇文章中关闭目录功能你可以在文章文件开头中的front-matter中加上一行toc: false。</p>
<p>-fancybox: 默认关闭，如果你使用Hexo经常发表Gallery类型的文章，那么请设置为true（同时需要复制fancybox.js到你的博客目录下scripts文件夹中）。ps: 我很佩服用Hexo发表相册的文艺青年。</p>
<p>-author: 作者信息，建议尽量填写完整。其中tsina是你的新浪微博ID，不同于用户名或微博主页地址。启用这个属性后，其他用户在微博上分享你文章的同时会自动@你。</p>
<p>-duoshuo: 多说评论系统。在大陆地区更好用的评论系统，如果你想更换为disqus请参考默认主题后自行修改。</p>
<p>-jiathis: 加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。</p>
<p>-google_analytics: Google Analytics追踪代码。请注意：*Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码 更多信息请点击这里了解。</p>
<p>-google_cse: Google自定义搜索。如果开启自定义搜索需要先登录Google CSE，配置好你的站点，并获得此自定义搜索的ID。此外你需要在博客目录下的source文件夹中建立search文件夹并包含一个index.md文件。内容为：</p>
<pre><code>
layout: search
title: search
---
</code></pre>

<h1 id="4-发表博文：">4.发表博文：</h1>
<ul>
<li>用Hexo来发表新文章，执行：</li>
</ul>
<pre><code>hexo new "my new post"</code></pre>

<p>其中my new post为文章标题。</p>
<ul>
<li>执行命令后，会在项目\source_posts中生成my new post.md文件，用sublime编辑器打开，开始写博客就行了。</li>
</ul>
<h1 id="5-使用markdown：">5.使用markdown：</h1>
<ul>
<li>写hexo博文，当然要用到Markdown语法，既美观，快速，还简单。<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">markdown</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[love hexo themes！]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://www.prokitty.com/tags/Hexo/"/>
    
      <category term="博客主题" scheme="http://www.prokitty.com/categories/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为树莓派对时]]></title>
    <link href="http://www.prokitty.com/2015/02/07/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AF%B9%E6%97%B6/"/>
    <id>http://www.prokitty.com/2015/02/07/为树莓派对时/</id>
    <published>2015-02-07T09:00:00.000Z</published>
    <updated>2015-02-10T14:10:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-安装ntp，输入">1.安装ntp，输入</h2>
<pre><code>sudo apt-get install ntpdate</code></pre>

<h2 id="2-修改时区，输入">2.修改时区，输入</h2>
<pre><code>tzselect</code></pre>

<h2 id="3-按照自己的时区修改：">3.按照自己的时区修改：</h2>
<h2 id="4-配置网络对时，输入">4.配置网络对时，输入</h2>
<pre><code>sudo ntpdate cn.pool.ntp.org</code></pre>


<p>注：cn.pool.ntp.org 是国家授时中心ntp服务器</p>
<h2 id="5-输入“date”，看看时间是不是对上了">5.输入“date”，看看时间是不是对上了</h2>
]]></content>
    <summary type="html">
    <![CDATA[raspberrypi for you ,this is ntpdate network.]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="树莓派" scheme="http://www.prokitty.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim中粘贴数据的时候如何取消自动缩进]]></title>
    <link href="http://www.prokitty.com/2015/02/06/vim%E4%B8%AD%E7%B2%98%E8%B4%B4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E5%80%99%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%87%AA%E5%8A%A8%E7%BC%A9%E8%BF%9B/"/>
    <id>http://www.prokitty.com/2015/02/06/vim中粘贴数据的时候如何取消自动缩进/</id>
    <published>2015-02-06T15:50:14.000Z</published>
    <updated>2015-02-10T14:14:05.000Z</updated>
    <content type="html"><![CDATA[<p>vim中在粘贴剪贴板中的数据时会自动增加缩进，这对python这种对缩进要求严格的语言来说简直是恶梦。如何让它不缩进,保持原格式呢？答案就是paste模式。</p>
<p>在粘贴数据之前，输入下面指定开启paste模式：</p>
<pre><code>:set paste</code></pre>

<p>粘贴完毕后，输入下面指定关闭paste模式：</p>
<pre><code>:set nopaste</code></pre>

<p>每次都需要输入是不是太麻烦，那么在.vimrc中加入下面内容吧：</p>
<pre><code>"Paste toggle - when pasting something in, don't indent.
set pastetoggle=F3 </code></pre>

<p>F3放在尖括号中。</p>
<p>这样就可以用F3来切换了。</p>
]]></content>
    <summary type="html">
    <![CDATA[just do it !]]>
    
    </summary>
    
      <category term="Vim" scheme="http://www.prokitty.com/tags/Vim/"/>
    
      <category term="Linux" scheme="http://www.prokitty.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[要做Linux运维工程师的朋友，必须要掌握以下几个工具]]></title>
    <link href="http://www.prokitty.com/2015/02/06/%E8%A6%81%E5%81%9Alinux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%9C%8B%E5%8F%8B%EF%BC%8C%E5%BF%85%E9%A1%BB%E8%A6%81%E6%8E%8C%E6%8F%A1%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.prokitty.com/2015/02/06/要做linux运维工程师的朋友，必须要掌握以下几个工具/</id>
    <published>2015-02-06T15:50:14.000Z</published>
    <updated>2015-02-10T14:21:48.000Z</updated>
    <content type="html"><![CDATA[<p>本人是linux运维工程师，对这方面有点心得，现在我说说要掌握哪方面的工具吧<br>说到工具，在行外可以说是技能，在行内我们一般称为工具，就是运维必须要掌握的工具。<br>我就大概列出这几方面，这样入门就基本没问题了。<br>linux系统如果是学习可以选用redhat或centos，特别是centos在企业中用得最多，当然还会有其它版本的，但学习者还是以这2个版本学习就行，因为这两个版本都是兄弟，没区别的，有空可以再研究一下SUSE，有些公司也喜欢用，例如我公司 。。。。。<br>工具如下：</p>
<ul>
<li>1、linux系统基础，这个不用说了，是基础中的基础，连这个都不会就别干了，参考书籍，可以看鸟哥linux基础篇，至少要掌握这书60%内容，没必须全部掌握，但基本命令总得会吧</li>
</ul>
<ul>
<li>2、网络服务，服务有很多种，每间公司都会用到不同的，但基础的服务肯定要掌握，如FTP, DNS,SAMBA, 邮件, 这几个大概学一下就行，LAMP和LNMP是必须要熟练，我所指的不是光光会搭建，而是要很熟悉里面的相当配置才行，因为公司最关键的绝对是WEB服务器，所以nginx和apache要熟悉，特别是nginx一定要很熟悉才行，至少有些公司还会用tomcat，这个也最好学一下。其实网络服务方面不用太担心，一般公司的环境都已经搭建好，就算有新服务器或让你整改，公司会有相应的文档让你参照来弄，不会让你乱来的，但至少相关的配置一定要学熟，而且肯定是编译安装多，那些模块要熟悉一下他的作用，特别是PHP那些模块。<br>这面2点只是基础，也是必要条件，不能说是工具，下以才是真正的要掌握的工具。</li>
</ul>
<ul>
<li>3、shell脚本和另一个脚本语言，shell是运维人员必须具备的，不懂这个连入职都不行，至少也要写出一些系统管理脚本，最简单也得写个监控CPU，内存比率的脚本吧，这是最最最基本了，别以为会写那些猜数字和计算什么数的，这些没什么作用，只作学习意义，写系统脚本才是最有意义，而另一个脚本语言是可选的，一般是3P，即python, perl和php，php就不需要考虑了，除非你要做开发，我个人建议学python会比较好，难实现自动化运维，perl是文本处理很强大，反正这两个学一个就行了。</li>
</ul>
<ul>
<li>4、sed和awk工具，必须要掌握，在掌握这两个工具同时，还要掌握正则表达式，这个就痛苦了，正则是最难学的表达式，但结合到sed和awk中会很强大，在处理文本内容和过滤WEB内容时十分有用，不过在学shell的同时一般会经常结合用到的，所以学第3点就会顺便学第4点。</li>
</ul>
<ul>
<li>5、文本处理命令，sort , tr , cut, paste, uniq, tee等，必学，也是结合第3点时一并学习的。</li>
</ul>
<ul>
<li>6、数据库，首选mysql，别问我为什么不学sqlserver和oracle，因为linux用得最多绝对是mysql，增删改查必学，特别要学熟查，其它方面可能不太需要，因为运维人员使用最多还是查，哪些优化和开发语句不会让你弄的。</li>
</ul>
<ul>
<li>7、防火墙，不学不行，防火墙也算是个难点，说难不难，说易不易，最重要弄懂规则，如果学过CCNA的朋友可能会比较好学，因为iptables也有NAT表，原理是一样的，而FILTER表用得最多，反正不学就肯定不合格。</li>
</ul>
<ul>
<li>8、监控工具，十分十分重要，我个人建议，最好学这3个，cacti，nagios，zibbix，企业用得最多应该是nagios和 zibbix，反正都学吧，但nagios会有点难，因为会涉及到用脚本写自动监控，那个地方很难。</li>
</ul>
<ul>
<li>9、集群和热备，这个很重要，肯定要懂的，但到了公司就不会让你去弄，因为新手基本不让你碰，集群工具有很多，最好学是LVS，这是必学，最好也学学nginx集群，反向代理，还有热备，这个就更多工具能实现了，像我公司是自己开发热备工具的，mysql热备也要学，就是主从复制，这个别告诉我容易，其实不容易的，要学懂整个流程一点也不容易，只照着做根本没意思。</li>
</ul>
<ul>
<li>10、数据备份，不学不行，工具有很多，但至少要把RAID的原理弄懂，特别是企业最常用的1+0或0+1，自己做实验也要弄出来，备份工具有很多，如tar, dump, rsync等，最好多了解一下。<br>算了，说到这10点已经够你受了，应该可以入门了，因为有些技术会比较难学，例如apache和nginx中还有些很重要的技术，如系统调优和服务优化，还有程序优化，这些在没接触工作前很难学习到的，所以先把这10点学了吧，估计要学熟至少3个月不止，就脚本那部分已经让你很吃力了，我建议是先学熟shell，等工作后再学另一门脚本语言，这样会比较好。</li>
</ul>
<p>以上就是踏入linux运维工程师需要掌握的工具，其实还有很多工具要掌握的，但你在学习环境中是很难学到，最后我再提醒一下，这里所指的工具相当于技能，而不是像windows或ubuntu那些图形化工具，那些工具没用的，还有，学linux就别装图形界面，这样虚拟机就不用吃太多内存，而且绝对不建议在真机上装linux，根本达不到学习效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[要做linux运维工程师的朋友，必须要掌握以下几个工具]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.prokitty.com/tags/Linux/"/>
    
      <category term="运维" scheme="http://www.prokitty.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[双机热备（高可用）]]></title>
    <link href="http://www.prokitty.com/2015/02/06/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%EF%BC%88%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%89/"/>
    <id>http://www.prokitty.com/2015/02/06/双机热备（高可用）/</id>
    <published>2015-02-06T13:50:14.000Z</published>
    <updated>2015-02-10T14:26:02.000Z</updated>
    <content type="html"><![CDATA[<p>双机热备特指基于高可用系统中的两台服务器的热备（或高可用），因两机高可用在国内使用较多，故得名双机热备，双机高可用按工作中的切换方式分为：主-备方式（Active-Standby方式）和双主机方式（Active-Active方式），主-备方式即指的是一台服务器处于某种业务的激活状态（即Active状态），另一台服务器处于该业务的备用状态（即Standby状态)。而双主机方式即指两种不同业务分别在两台服务器上互为主备状态（即Active-Standby和Standby-Active状态）。简单理解就是，有两台机器A和B，正常是A提供服务，B待命闲置，当A宕机或服务宕掉，会切换至B机器继续提供服务。下面我们使用heartbeat来做HA集群，并且把nginx服务作为HA对应的服务。</p>
<h1 id="试验准备：">试验准备：</h1>
<p>两个机器, 都是centos6.5，网卡eth1 ip如下：<br>chen   192.168.36.128<br>root  192.168.36.132</p>
<h1 id="安装epel扩展源：">安装epel扩展源：</h1>
<pre><code>rpm -ivh  'http://www.lishiming.net/data/attachment/forum/epel-release-6-8_32.noarch.rpm'</code></pre>

<h1 id="安装heartbeat：">安装heartbeat：</h1>
<p>两个机器都安装heartbeat / libnet</p>
<pre><code>yum  install -y heartbeat*   libnet  nginx</code></pre>

<h1 id="主上（chen）配置:">主上（chen）配置:</h1>
<pre><code>
cd /usr/share/doc/heartbeat-3.0.4/
cp  authkeys  ha.cf haresources   /etc/ha.d/
cd /etc/ha.d
vi  authkeys  #加入

>3 md5 Hello!

chmod 600 authkeys

vi  haresources  #加入

>chen 192.168.36.128/eth1:0 nginx   

vi  ha.cf   #改为如下内容：

>debugfile /var/log/ha-debug
>logfile /var/log/ha-log
>logfacility     local0
>keepalive  2
>deadtime  30
>warntime  10
>initdead  60
>udpport  694
>ucast eth1  192.168.36.132
>auto_failback on
>node    chen
>node    root
>ping 192.168.253.1  #裁判的ip
>respawn hacluster /usr/lib/heartbeat/ipfail
</code></pre>

<h1 id="把主上的三个配置拷贝到从上：">把主上的三个配置拷贝到从上：</h1>
<pre><code>cd /etc/ha.d/</code></pre>
<pre><code>scp  authkeys  ha.cf haresources   root:/etc/ha.d/</code></pre>

<h1 id="到从上(root)_编辑ha-cf">到从上(root) 编辑ha.cf</h1>
<pre><code>vi  /etc/ha.d/ha.cf   #只需要更改一个地方</code></pre>
<pre><code>ucast eth1 192.168.36.132 改为   ucast eth1 192.168.36.128  </code></pre>


<h1 id="启动heartbeat_:">启动heartbeat :</h1>
<p> 先主，后从</p>
<pre><code>service heartbeat start</code></pre>


<h1 id="检查测试_:">检查测试 :</h1>
<pre><code>ifconfig   #看是否有 eth1:0
ps aux |grep nginx    #看是否有nginx进程</code></pre>


<h1 id="测试1：">测试1：</h1>
<p>主上故意禁ping</p>
<pre><code>iptables -I INPUT -p icmp -j DROP</code></pre>

<h1 id="测试2：">测试2：</h1>
<p>主上停止heartbeat服务</p>
<pre><code>service heartbeat stop </code></pre>]]></content>
    <summary type="html">
    <![CDATA[just do it !]]>
    
    </summary>
    
      <category term="双机热备" scheme="http://www.prokitty.com/tags/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/"/>
    
      <category term="高可用" scheme="http://www.prokitty.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="Linux" scheme="http://www.prokitty.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装Word Press]]></title>
    <link href="http://www.prokitty.com/2015/02/06/%E5%AE%89%E8%A3%85WordPress/"/>
    <id>http://www.prokitty.com/2015/02/06/安装WordPress/</id>
    <published>2015-02-05T17:50:14.000Z</published>
    <updated>2015-02-10T14:18:04.000Z</updated>
    <content type="html"><![CDATA[<p>WordPress是一个功能非常强大的博客系统，插件众多，易于扩充功能。安装和使用都非常方便。是目前主流的 Blog 搭建平台。</p>
<h1 id="准备工作">准备工作</h1>
<ul>
<li>下载wordpress 程序官方下载地址: <a href="http://cn.wordpress.org/(目前最新版下载链接" target="_blank" rel="external">http://cn.wordpress.org/(目前最新版下载链接</a> <a href="http://cn.wordpress.org/wordpress-3.0.1-zh_CN.zip" target="_blank" rel="external">http://cn.wordpress.org/wordpress-3.0.1-zh_CN.zip</a>)</li>
</ul>
<pre><code>wget http://cn.wordpress.org/wordpress-3.0.1-zh_CN.zip
</code></pre>

<h1 id="安装前提：">安装前提：</h1>
<ul>
<li>已经安装了Mysql、Apache、PHP，LAMP环境部署完毕。</li>
</ul>
<h1 id="安装步骤：">安装步骤：</h1>
<ul>
<li>1.解压刚才下载的安装包：</li>
</ul>
<pre><code>unzip wordpress-3.0.1-zh_CN.zip
</code></pre>

<ul>
<li><p>2.在MySQL中使用phpMyAdmin或者其他用户创建一个MySQL数据库，这个数据库用于保存WordPress的数据。</p>
</li>
<li><p>3.第一次运行上传的文件，WordPress系统会检测根目录下是否存在wp-config.php，如果不存在，会自动转到安装的界面，安装的时候属于一些必要的信息，例如博客的名称，电子邮件地址，数据库的名称，数据库用户名和密码等等，根据系统提示往下走，安装工作的最后一步，就可以获取到你的Wordpress用户名和密码，当然，系统还会自动把用户名和密码发送到你的电子信箱中。</p>
</li>
<li><p>4.就是修改wordpress程序包中的wp-config-sample.php文件，将第7步中记下的主机地址、数据库名称、用户名、密码填入相应的位置就可以了，并重命名为wp-config.php</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[WordPress是一个功能非常强大的博客系统，插件众多，易于扩充功能。安装和使用都非常方便。是目前主流的 Blog 搭建平台。]]>
    
    </summary>
    
      <category term="WordPress" scheme="http://www.prokitty.com/tags/WordPress/"/>
    
      <category term="博客主题" scheme="http://www.prokitty.com/categories/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
